export declare const schemaContent = "import { FormGroup, FormControl, Validators } from '@angular/forms';\n\nimport { EntitySchema } from 'src/core/abstract';\nimport { deepAssign } from 'src/core/util';\n\n\nexport const {{EntityPlural}}Schema: EntitySchema = {\n  name: {{entityName}},\n  detail: {\n    frm: new FormGroup({\n      idreg: new FormControl(),\n      descripcion: new FormControl('', [Validators.required]),\n    }),\n  },\n  list: {\n    fields: 'idreg',\n    orderBy: 'descripcion',\n    filter: ['descripcion'],\n  }\n};\n";
export declare const serviceContent = "import { Injectable, Injector } from '@angular/core';\n\nimport { AppConfig } from 'src/config';\nimport { AbstractModelService } from 'src/core/abstract';\nimport { ApiService } from 'src/core/api';\n\nimport { UserService } from 'src/app/user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class {{entityPlural}}Service extends AbstractModelService {\n  protected debug = true && AppConfig.debugEnabled;\n\n  constructor(\n    public injector: Injector,\n    public api: ApiService,\n    public user: UserService,\n  ) {\n    super(injector, api);\n    if (this.debug) { console.log(this.constructor.name + '.constructor()'); }\n  }\n\n}\n";
export declare const moduleContent = "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppCoreModule } from 'src/core';\nimport { AuthGuard } from 'src/core/auth';\n\nimport { {{EntityPlural}}ListPage } from './{{entityPlural}}-list.page';\nimport { {{EntityPlural}}ListComponent } from './{{entityPlural}}-list.component';\nimport { {{EntitySingular}}DetailPage } from './{{entitySingular}}-detail.page';\n\nconst routes: Routes = [\n  { path: '{{entityPlural}}', component: {{EntityPlural}}ListPage, canActivate: [AuthGuard], canLoad: [AuthGuard], children: [\n    { path: 'list', component: {{EntityPlural}}ListComponent },\n    { path: '', redirectTo: 'list', pathMatch: 'full' }\n  ]},\n  { path: '{{entitySingular}}/:id', component: {{EntitySingular}}DetailPage, canActivate: [AuthGuard], canLoad: [AuthGuard] },\n];\n\n@NgModule({\n  imports: [\n    AppCoreModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [\n    {{EntityPlural}}ListPage,\n    {{EntityPlural}}ListComponent,\n    {{EntitySingular}}DetailPage,\n  ],\n  exports: [\n    RouterModule,\n  ],\n})\nexport class {{EntityPlural}}Module { }\n";
export declare const listPageTsContent = "import { Component } from '@angular/core';\n\nimport { AppConfig } from 'src/config';\n\n@Component ({\n  selector: 'app-{{entityPlural}}-list-page',\n  templateUrl: '{{entityPlural}}-list.page.html',\n  styleUrls: ['{{entityPlural}}-list.page.scss'],\n})\nexport class {{EntityPlural}}ListPage {\n  protected debug = true && AppConfig.debugEnabled;\n\n  constructor(\n  ) {\n    if (this.debug) { console.log(this.constructor.name + '.constructor()'); }\n  }\n\n}\n";
export declare const listPageHtmlContent = "<ion-header>\n\n<ion-toolbar>\n  <ion-buttons slot=\"start\">\n    <ion-back-button [text]=\"'buttons.back' | translate\"></ion-back-button>\n  </ion-buttons>\n  <ion-title>{{'{{entityPlural}}.{{entityPlural}}' | translate}}</ion-title>\n</ion-toolbar>\n\n</ion-header>\n<ion-content [scrollY]=\"false\">\n\n<ion-tabs>\n  <ion-tab-bar #tabBarRef slot=\"top\" style=\"display: none;\">\n    <ion-tab-button tab=\"list\"></ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>\n\n</ion-content>\n";
export declare const listComponentTs = "import { Component, Injector, OnInit, OnDestroy } from '@angular/core';\n\nimport { AppConfig } from 'src/config';\nimport { AbstractListComponent } from 'src/core/abstract';\n\nimport { UserService } from 'src/app/user';\n\nimport { {{EntityPlural}}Schema } from './{{entityPlural}}.schema';\nimport { {{EntityPlural}}Service } from './{{entityPlural}}.service';\n\n\n@Component ({\n  selector: 'app-{{entityPlural}}-list',\n  templateUrl: '{{entityPlural}}-list.component.html',\n  styleUrls: ['{{entityPlural}}-list.component.scss'],\n})\nexport class {{EntityPlural}}ListComponent extends AbstractListComponent implements OnInit, OnDestroy {\n  protected debug = true && AppConfig.debugEnabled;\n\n  constructor(\n    public injector: Injector,\n    public service: {{EntityPlural}}Service,\n    public user: UserService,\n  ) {\n    super(injector, {{EntityPlural}}Schema);\n    if (this.debug) { console.log(this.constructor.name + '.constructor()'); }\n  }\n\n}\n";
export declare const listComponentScss = "\n// @import 'src/core/abstract/components/abstract-list.component.scss';\n// @include multiselect;\n";
export declare const listComponentHtml = "<ion-header>\n\n<ion-toolbar *ngIf=\"isModal\">\n  <ion-buttons slot=\"start\">\n    <ion-button (click)=\"modal.dismiss()\">\n      <ion-icon slot=\"icon-only\" name=\"close-circle\"></ion-icon>\n    </ion-button>\n  </ion-buttons>\n  <ion-title>{{headerText}}</ion-title>\n</ion-toolbar>\n\n<ion-grid fixed *ngIf=\"!isPopover\">\n  <ion-row>\n    <ion-col>\n      <ion-searchbar #searchInput [(ngModel)]=\"search\" debounce=\"500\" placeholder=\"{{'buttons.search' | translate}}...\"></ion-searchbar>\n    </ion-col>\n  </ion-row>\n</ion-grid>\n\n<ion-progress-bar *ngIf=\"loading\" type=\"indeterminate\"></ion-progress-bar>\n\n</ion-header>\n<ion-content>\n\n<ion-list>\n  <ion-grid fixed>\n    <ion-row>\n      <ion-col size=\"12\" *ngFor=\"let row of rows | filter:search:list.filter | orderBy:list.orderBy\">\n\n        <ion-item-sliding>\n          <ion-item button (click)=\"selectRow(row)\" [detail]=\"!isPickRowMode\" [ngClass]=\"{ selected: isSelected(row)}\" class=\"item-color\">\n\n            <ion-icon *ngIf=\"preloading !== row.idreg\" name=\"flag\" slot=\"start\"></ion-icon>\n            <ion-spinner *ngIf=\"preloading === row.idreg\" name=\"lines-small\" slot=\"start\"></ion-spinner>\n            <ion-label class=\"ion-text-wrap\">\n              <text-colorized [value]=\"row.nombre\" [search]=\"search\"></text-colorized>\n              <p *ngIf=\"row.descripcion\"><text-colorized [value]=\"row.descripcion\" [search]=\"search\"></text-colorized></p>\n            </ion-label>\n            <!-- <ion-icon *ngIf=\"row.active\" [name]=\"row.active ? 'checkmark' : 'close'\" slot=\"end\" size=\"small\"></ion-icon> -->\n            <ion-icon *ngIf=\"isSelected(row)\" slot=\"end\" name=\"checkmark\"></ion-icon>\n          </ion-item>\n\n          <ion-item-options side=\"end\">\n            <ion-item-option (click)=\"deleteRow(row)\" color=\"danger\">\n              <ion-icon slot=\"icon-only\" name=\"trash\"></ion-icon>\n            </ion-item-option>\n          </ion-item-options>\n        </ion-item-sliding>\n\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-list>\n\n<ion-infinite-scroll (ionInfinite)=\"refresh($event)\" threshold=\"100px\">\n  <ion-infinite-scroll-content loadingSpinner=\"circles\" loadingText=\"{{loadingText}}\"></ion-infinite-scroll-content>\n</ion-infinite-scroll>\n\n</ion-content>\n<ion-footer *ngIf=\"canCreate\">\n\n<ion-grid fixed>\n  <ion-row>\n    <ion-col>\n\n      <ion-button (click)=\"selectRow('new')\" color=\"primary\" expand=\"block\">\n        <ion-icon slot=\"start\" name=\"add\"></ion-icon>\n        {{addNewText}}\n      </ion-button>\n\n    </ion-col>\n  </ion-row>\n</ion-grid>\n\n</ion-footer>\n";
export declare const detailPageTs = "import { Component, Injector, OnInit, OnDestroy } from '@angular/core';\n\nimport { AppConfig } from 'src/config';\nimport { AbstractDetailComponent } from 'src/core/abstract';\n\nimport { UserService } from 'src/app/user';\n\nimport { {{EntityPlural}}Schema } from './{{entityPlural}}.schema';\nimport { {{EntityPlural}}Service } from './{{entityPlural}}.service';\n\n\n@Component ({\n  selector: 'app-{{entitySingular}}-detail',\n  templateUrl: '{{entitySingular}}-detail.page.html',\n  styleUrls: ['{{entitySingular}}-detail.page.scss'],\n})\nexport class {{EntitySingular}}DetailPage extends AbstractDetailComponent implements OnInit, OnDestroy {\n  protected debug = true && AppConfig.debugEnabled;\n\n  constructor(\n    public injector: Injector,\n    public service: {{EntityPlural}}Service,\n    public user: UserService,\n  ) {\n    super(injector, {{EntityPlural}}Schema);\n    if (this.debug) { console.log(this.constructor.name + '.constructor()'); }\n\n  }\n\n}\n";
export declare const detailPageHtml = "<ion-header>\n\n<ion-toolbar>\n  <ion-buttons slot=\"start\">\n    <ion-back-button [text]=\"'buttons.back' | translate\"></ion-back-button>\n  </ion-buttons>\n  <ion-title>{{headerText}}</ion-title>\n</ion-toolbar>\n\n</ion-header>\n<ion-content>\n\n  <form [formGroup]=\"frm\" (ngSubmit)=\"saveRow()\">\n\n    <ion-card class=\"detail\">\n\n      <ion-grid>\n        <ion-row>\n          <ion-col>\n\n            <ion-item>\n              <ion-label position=\"floating\">{{'{{entityPlural}}.nombre' | translate}} <ion-text color=\"danger\">*</ion-text></ion-label>\n              <ion-input #focusRef formControlName=\"nombre\" type=\"text\" placeholder=\"{{'{{entityPlural}}.nombre' | translate}} *\" required></ion-input>\n            </ion-item>\n\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n\n            <ion-item>\n              <ion-icon slot=\"start\" name=\"location\"></ion-icon>\n              <ion-input formControlName=\"descripcion\" type=\"text\" placeholder=\"{{'{{entityPlural}}.descripcion' | translate}}\" spellcheck=\"false\" required></ion-input>\n            </ion-item>\n\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n\n\n      <div class=\"error ion-text-start\">\n        <p *ngIf=\"initialized && (!isNew || isNew && (getter('nombre').touched || getter('nombre').dirty)) && getter('nombre').errors?.required\">{{'{{entityPlural}}.nombre_required' | translate}}</p>\n        <p *ngIf=\"initialized && (!isNew || isNew && (getter('descripcion').touched || getter('descripcion').dirty)) && getter('descripcion').errors?.required\">{{'{{entityPlural}}.descripcion_required' | translate}}</p>\n      </div>\n\n      <ion-grid class=\"buttons\">\n        <ion-row>\n          <ion-col>\n\n            <ion-button type=\"button\" (click)=\"deleteRow()\" [color]=\"isNew ? 'secondary' : 'danger'\" expand=\"block\"><ion-icon *ngIf=\"!isNew\" slot=\"start\" name=\"trash\"></ion-icon>{{(isNew ? 'buttons.cancel' : 'buttons.delete') | translate | uppercase }}</ion-button>\n\n            </ion-col>\n          <ion-col>\n\n            <ion-button type=\"submit\" [disabled]=\"!initialized || frm.invalid || frm.pristine\" color=\"primary\" expand=\"block\">{{'buttons.save' | translate | uppercase }}</ion-button>\n\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n\n    </ion-card>\n  </form>\n\n</ion-content>\n";
//# sourceMappingURL=generate.d.ts.map